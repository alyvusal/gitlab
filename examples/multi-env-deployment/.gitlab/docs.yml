variables:
  GIT_VERSION: v2.30.1

# Set up this script
#   1. Create a new personal access token (https://gitlab.com/-/profile/personal_access_tokens)
#      with the following scopes:
#        - read_repository
#        - write_repository
#   2. Inside Settings -> CI / CD -> Variables, create the following variables:
#
#   GITLAB_TOKEN          Personal access token.
#     (masked)

.git:push:
  stage: test
  image:
    name: alpine/git:${GIT_VERSION}
    entrypoint: ['']
  before_script:
    - git config --global user.email "GitLab CI/CD"
    - git config --global user.name "gitlab-ci-cd@example.com"
    - git branch
  after_script:
    - git add .
    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        git status
        git commit -m "Automated':' Update Terraform documentation"
        git status
        git push origin "${CI_DEFAULT_BRANCH}" -o ci.skip
      fi

terraform_docs:
  stage: test
  image:
    name: quay.io/terraform-docs/terraform-docs:0.20.0
    entrypoint: [""]
  script:
    - terraform-docs markdown table --indent 2 --output-file README.md --recursive --recursive-path . $CI_PROJECT_DIR/modules
  artifacts:
    paths:
      - "**/README.md"
  rules:
    - if: $SAST_DISABLED == "true" || $SAST_DISABLED == "1"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - modules/**/*.tf
      when: always
    - when: never

# auto_commit_docs:
#   stage: test # Or a suitable stage after documentation generation
#   image:
#     # name: bitnami/git # A lightweight image with Git
#     name: alpine/git:${GIT_VERSION}
#     entrtypoint: ['']
#   needs:
#     - terraform_docs
#   script:
#     # - cd $CI_PROJECT_DIR
#     - git config user.name "GitLab CI/CD"
#     - git config user.email "gitlab-ci-cd@example.com"
#     - git add .
#     - git diff --quiet || git commit -m "Automated':' Update Terraform documentation"
#     - git push http://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git HEAD:${CI_COMMIT_REF_NAME}
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main" # Or your target branch
#       changes:
#         - modules/**/*.tf
#       when: on_success

auto_commit_docs:
  extends: .git:push
  needs:
    - terraform_docs
  script:
    - echo "Adding terraform docs changes to git"
  rules:
    - if: $SAST_DISABLED == "true" || $SAST_DISABLED == "1"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - modules/**/*.tf
      when: always
    - when: never
